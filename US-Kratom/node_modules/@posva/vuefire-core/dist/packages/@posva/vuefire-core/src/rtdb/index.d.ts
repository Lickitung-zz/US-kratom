import { RTDBSerializer, rtdb } from './utils';
import { OperationsType } from '../shared';
export interface RTDBOptions {
    reset?: boolean | (() => any);
    serialize?: RTDBSerializer;
}
declare const DEFAULT_OPTIONS: Required<RTDBOptions>;
export { DEFAULT_OPTIONS as rtdbOptions };
interface CommonBindOptionsParameter {
    vm: object;
    key: string;
    resolve: (value: any) => void;
    reject: (error: any) => void;
    ops: OperationsType;
}
interface BindAsObjectParameter extends CommonBindOptionsParameter {
    document: rtdb.Reference | rtdb.Query;
}
/**
 * Binds a RTDB reference as an object
 * @param param0
 * @param options
 * @returns a function to be called to stop listeninng for changes
 */
export declare function rtdbBindAsObject({ vm, key, document, resolve, reject, ops }: BindAsObjectParameter, extraOptions?: RTDBOptions): () => void;
interface BindAsArrayParameter extends CommonBindOptionsParameter {
    collection: rtdb.Reference | rtdb.Query;
}
/**
 * Binds a RTDB reference or query as an array
 * @param param0
 * @param options
 * @returns a function to be called to stop listeninng for changes
 */
export declare function rtdbBindAsArray({ vm, key, collection, resolve, reject, ops }: BindAsArrayParameter, extraOptions?: RTDBOptions): () => void;
